{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenidos a la Comunidad NeuroNexoTec Ingenier\u00eda y Open Source","text":"<p>En un mundo en el que la tecnolog\u00eda avanza a pasos agigantados, creemos que la colaboraci\u00f3n, la transparencia y el conocimiento compartido son los pilares fundamentales para construir un ecosistema tecnol\u00f3gico m\u00e1s fuerte y sostenible.</p> <p>Nuestra comunidad nace con un prop\u00f3sito claro: definir y promover las mejores pr\u00e1cticas de ingenier\u00eda en TI, creando una referencia abierta y accesible para cualquier organizaci\u00f3n que quiera construir tecnolog\u00eda de calidad.</p>"},{"location":"#que-hacemos","title":"\ud83d\ude80 \u00bfQu\u00e9 hacemos?","text":"<ul> <li>Dise\u00f1amos est\u00e1ndares y pol\u00edticas t\u00e9cnicas que pueden ser adoptados por empresas de todos los tama\u00f1os.</li> <li>Desarrollamos herramientas open source pensadas para entornos productivos reales.</li> <li>Documentamos buenas pr\u00e1cticas en desarrollo, infraestructura, seguridad y operaci\u00f3n.</li> <li>Creamos comunidad, compartiendo experiencia, conocimiento y visi\u00f3n de futuro.</li> </ul>"},{"location":"#nuestro-objetivo","title":"\ud83c\udfaf Nuestro objetivo","text":"<p>Queremos ser un punto de encuentro para profesionales, empresas y entusiastas que buscan algo m\u00e1s que soluciones r\u00e1pidas. Buscamos establecer una nueva forma de hacer ingenier\u00eda en M\u00e9xico y Latinoam\u00e9rica, m\u00e1s ordenada, m\u00e1s segura y, sobre todo, m\u00e1s colaborativa.</p> <p>Esta documentaci\u00f3n es el coraz\u00f3n vivo de nuestra comunidad. Aqu\u00ed encontrar\u00e1s nuestras pol\u00edticas, gu\u00edas, principios y todo lo que necesitas para adoptar o contribuir a este movimiento.</p> <p>Bienvenido. Aqu\u00ed empieza el cambio.</p> <p>\u2709\ufe0f \u00bfTienes una idea, una pr\u00e1ctica que te ha funcionado o quieres ayudar a otros equipos? Nos encantar\u00eda contar contigo. Revisa nuestra Gu\u00eda de Contribuci\u00f3n y s\u00e9 parte del futuro del software abierto en M\u00e9xico.</p>"},{"location":"comunidad/codigo-conducta/","title":"Codigo de conducta","text":""},{"location":"comunidad/como-participar/","title":"Como puedes participar","text":""},{"location":"comunidad/introduccion/","title":"La comunidad hispana de Ingenieria y Open Source","text":""},{"location":"comunidad/mision/","title":"Nuestra mision","text":""},{"location":"comunidad/principios/","title":"Nuestros principios","text":""},{"location":"comunidad/vision/","title":"Nuestra vision","text":""},{"location":"desarrollo/buenas-practicas/","title":"Guia de buenas practicas en el desarrollo de software","text":""},{"location":"desarrollo/exception-handler/","title":"Manejador de excepciones","text":""},{"location":"desarrollo/proceso/","title":"Proceso de desarrollo","text":""},{"location":"desarrollo/error-handler/clasificacion-errores/","title":"Clasificaci\u00f3n de Errores","text":"<p>Los errores no son simplemente \"algo sali\u00f3 mal\". En un sistema distribuido y mantenible, cada error debe tener un contexto sem\u00e1ntico claro y accionable. Para lograrlo, los errores deben clasificarse en categor\u00edas estructuradas, las cuales no solo permiten un mejor debugging, sino tambi\u00e9n facilitan:</p> <ul> <li>Automatizaci\u00f3n del manejo de errores en clientes (frontend, SDKs)</li> <li>Alertas e indicadores en observabilidad</li> <li>Documentaci\u00f3n t\u00e9cnica y soporte</li> <li>Diagn\u00f3stico r\u00e1pido para DevOps y SRE</li> </ul>"},{"location":"desarrollo/error-handler/clasificacion-errores/#errores-del-cliente-4xx","title":"Errores del cliente - 4xx","text":"<p>Qu\u00e9 son: Solicitudes mal formadas, inv\u00e1lidas o no autorizadas.</p> <p>Responsable: El consumidor del servicio.</p> <p>Ejemplos comunes:</p> <ul> <li>Formatos incorrectos</li> <li>Faltan par\u00e1metros</li> <li>Violaciones de negocio por parte del cliente</li> </ul> C\u00f3digo HTTP C\u00f3digo Interno Descripci\u00f3n Utilidad 400 <code>VALIDATION_001</code> Cuando un campo no es correcto o no cumple con validaciones del request Validacion y renderizado de errores del canal consumidor 401 <code>AUTH_401_001</code> No autenticado Evitar accesos no controlados al sistema 403 <code>AUTH_403_001</code> No autorizado para acceder al recurso Evitar accesos espeficicos no autorizados al sistema 404 <code>RESOURCE_404_001</code> Recurso no encontrado Dar feedback al usuario 409 <code>CONFLICT_409_001</code> Conflicto de datos (e.g., ya existe) Evita reintentos innecesarios 422 <code>BUSINESS_422_001</code> Errores que surgen de la validacion de reglas de negocio Muestran mensajes logicos referentes a la logica de negocio al canal consumidor <p>\u2705 Importancia: Permiten que el cliente sepa que debe corregir su solicitud, sin necesidad de escalar el error.</p>"},{"location":"desarrollo/error-handler/clasificacion-errores/#errores-del-servidor-5xx","title":"Errores del servidor - 5xx","text":"<p>Qu\u00e9 son: Fallos internos del sistema.</p> <p>Responsable: El backend o alg\u00fan sistema interno.</p> <p>Ejemplos comunes:</p> <ul> <li>Null pointers</li> <li>Timeouts</li> <li>Faltas de conectividad a servicios internos</li> </ul> C\u00f3digo HTTP C\u00f3digo Interno Descripci\u00f3n Utilidad 500 <code>INTERNAL_500_001</code> Error no controlado Sirve como catch-all, debe estar logueado 502 <code>DOWNSTREAM_502_001</code> Servicio externo no disponible Retentable por el cliente 503 <code>TIMEOUT_503_001</code> Timeout con proveedor o base de datos Retry autom\u00e1tico o fallback 504 <code>GATEWAY_504_001</code> Timeout en API Gateway Se pueden analizar cuellos de botella <p>\u2705 Importancia: Estos errores deben ser siempre logueados con requestId y generan alertas. En sistemas resilientes se dise\u00f1an estrategias de retry o fallback sobre ellos.</p> <p>Los errores deben clasificarse en los siguientes tipos:</p> <ul> <li><code>VALIDATION_ERROR</code> (400)</li> <li><code>BUSINESS_RULE_ERROR</code> (422)</li> <li><code>AUTHENTICATION_ERROR</code> (401)</li> <li><code>AUTHORIZATION_ERROR</code> (403)</li> <li><code>RESOURCE_NOT_FOUND</code> (404)</li> <li><code>CONFLICT</code> (409)</li> <li><code>INTERNAL_ERROR</code> (500)</li> <li><code>SERVICE_UNAVAILABLE</code> (503)</li> </ul>"},{"location":"desarrollo/error-handler/introduccion/","title":"Error Handling Standard - v0.1","text":""},{"location":"desarrollo/error-handler/introduccion/#introduccion","title":"\ud83e\udded Introducci\u00f3n","text":"<p>En los sistemas distribuidos modernos \u2014y especialmente en microservicios como nuestro <code>Notification Service</code>\u2014 los errores no son una posibilidad: son una certeza. Ya sea por un fallo en una base de datos, un proveedor de correo ca\u00eddo o un bug inesperado en una librer\u00eda de terceros, los errores forman parte del ciclo de vida de cualquier sistema en producci\u00f3n.</p> <p>Esta gu\u00eda te mostrar\u00e1 c\u00f3mo dise\u00f1ar e implementar un sistema de manejo de errores centralizado, robusto y reutilizable, que transforme fallos silenciosos o ca\u00f3ticos en respuestas claras, rastreables y comprensibles tanto para el equipo de desarrollo como para los usuarios finales o integradores del sistema.</p> <p>\u2757 \u00bfPor qu\u00e9 es importante aplicar un Error Handler? Un error handler bien dise\u00f1ado no solo captura excepciones: estructura y comunica los errores, proporciona trazabilidad, y garantiza una experiencia de desarrollo m\u00e1s profesional y mantenible.</p>"},{"location":"desarrollo/error-handler/introduccion/#escenarios-comunes-donde-es-clave","title":"Escenarios comunes donde es clave:","text":"<p>\ud83d\udcec Servicios de terceros fallan: como SMTP, Twilio o AWS SES. Necesit\u00e1s capturar el error y responder de forma coherente al cliente.</p> <p>\ud83e\uddfe Errores de validaci\u00f3n: un input malformado puede terminar en una NullPointerException si no se maneja adecuadamente.</p> <p>\u26a0\ufe0f Fallos de l\u00f3gica interna: como intentos de reenv\u00edo a direcciones inv\u00e1lidas o proveedores no soportados.</p> <p>\ud83d\udd10 Errores de autenticaci\u00f3n/autorizaci\u00f3n: por falta de credenciales v\u00e1lidas o permisos insuficientes.</p> <p>Sin un handler claro, tus APIs terminan lanzando trazas de pila crudas (stacktraces), mensajes confusos o errores silenciosos que son un infierno para debuggear y una pesadilla para tus usuarios.</p>"},{"location":"desarrollo/error-handler/introduccion/#beneficios-de-tener-un-error-handler-centralizado","title":"\ud83c\udf1f Beneficios de tener un Error Handler centralizado","text":"<ol> <li>Uniformidad de respuestas Todas las APIs responden con una estructura est\u00e1ndar, por ejemplo:</li> </ol> <pre><code>{\n  \"timestamp\": \"2025-05-29T15:30:00Z\",\n  \"status\": 400,\n  \"error\": \"Bad Request\",\n  \"message\": \"El campo 'to' no puede estar vac\u00edo.\",\n  \"traceId\": \"9e582edc-087a-4a9e-b8d6-b7a88fc5a935\"\n}\n</code></pre> <ol> <li> <p>Trazabilidad mejorada Cada error incluye un traceId \u00fanico (usualmente pasado como header) para correlacionar eventos en logs, m\u00e9tricas y dashboards.</p> </li> <li> <p>Facilidad para el monitoreo y alertas Con este sistema pod\u00e9s integrar herramientas como Grafana, Prometheus o Sentry, y disparar alertas ante ciertos tipos de errores.</p> </li> <li> <p>Menor acoplamiento con clientes Los clientes de tus APIs no necesitan interpretar errores seg\u00fan el tipo de excepci\u00f3n Java: les das un contrato claro de qu\u00e9 esperar.</p> </li> </ol>"},{"location":"desarrollo/error-handler/introduccion/#pasos-para-implementar-el-error-handler","title":"\ud83d\udee0\ufe0f Pasos para implementar el Error Handler","text":"<p>\u2705 1. Defin\u00ed tus errores personalizados</p> <pre><code>public class EmailSendException extends RuntimeException {\n    public EmailSendException(String message) {\n        super(message);\n    }\n}\n</code></pre> <p>Opcionalmente pod\u00e9s crear una jerarqu\u00eda como ApplicationException con c\u00f3digos y niveles de severidad.</p> <p>\u2705 2. Implement\u00e1 un handler global Us\u00e1 @ControllerAdvice y @ExceptionHandler:</p> <pre><code>@RestControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(EmailSendException.class)\n    public ResponseEntity&lt;ErrorResponse&gt; handleEmailSend(EmailSendException ex) {\n        return buildResponse(HttpStatus.SERVICE_UNAVAILABLE, ex.getMessage());\n    }\n\n    @ExceptionHandler(Exception.class)\n    public ResponseEntity&lt;ErrorResponse&gt; handleGeneric(Exception ex) {\n        return buildResponse(HttpStatus.INTERNAL_SERVER_ERROR, \"Error inesperado.\");\n    }\n\n    private ResponseEntity&lt;ErrorResponse&gt; buildResponse(HttpStatus status, String message) {\n        return new ResponseEntity&lt;&gt;(\n            new ErrorResponse(\n                Instant.now().toString(),\n                status.value(),\n                status.getReasonPhrase(),\n                message,\n                RequestContext.getRequestId()\n            ),\n            status\n        );\n    }\n}\n</code></pre> <p>\u2705 3. Dise\u00f1\u00e1 un modelo est\u00e1ndar para las respuestas de error</p> <pre><code>@Data\n@AllArgsConstructor\npublic class ErrorResponse {\n    private String timestamp;\n    private int status;\n    private String error;\n    private String message;\n    private String traceId;\n}\n</code></pre> <p>\u2705 4. Us\u00e1 RequestContext para mantener el traceId Este componente se puede poblar en un filtro que lea el header:</p> <pre><code>@Component\npublic class TraceIdFilter extends OncePerRequestFilter {\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                    HttpServletResponse response,\n                                    FilterChain filterChain)\n            throws ServletException, IOException {\n        String traceId = request.getHeader(\"X-Trace-Id\");\n        RequestContext.setRequestId(traceId != null ? traceId : UUID.randomUUID().toString());\n        try {\n            filterChain.doFilter(request, response);\n        } finally {\n            RequestContext.clear();\n        }\n    }\n}\n</code></pre> <p>\u2705 5. Integra los logs con el traceId Tu clase LogObserver o Logger custom deber\u00eda incluir el traceId en cada mensaje de log para facilitar el seguimiento.</p> <p>\ud83e\udd1d Unite a la comunidad o contactanos Si llegaste hasta ac\u00e1, probablemente ya est\u00e9s dise\u00f1ando o manteniendo una API seria. En ese camino, no est\u00e1s solo.</p> <p>Si quer\u00e9s ayuda para implementar tu sistema de errores, conectar con otros desarrolladores o simplemente resolver un bloqueo t\u00e9cnico, pod\u00e9s contactarnos o sumarte a nuestra comunidad.</p> <p>\ud83d\udcec \u00bfDudas puntuales? Escribinos. \ud83e\uddd1\u200d\ud83d\udcbb \u00bfQuer\u00e9s compartir lo que hiciste? \u00a1Mostralo en la comunidad! \ud83d\udd27 \u00bfQuer\u00e9s una consultor\u00eda a medida? Podemos trabajar juntos en eso tambi\u00e9n.</p>"},{"location":"desarrollo/error-handler/respuestas/","title":"Estructura de respuestas","text":""},{"location":"desarrollo/error-handler/respuestas/#regla-inamovible","title":"\ud83d\udd0f Regla inamovible","text":"<p>Todas las respuestas de error deben tener el siguiente formato JSON</p>"},{"location":"desarrollo/error-handler/respuestas/#interpretacion","title":"\ud83d\udd0b Interpretacion","text":"<p>Un formato estandarizado para las respuestas de error no es un detalle menor. Es una pieza clave para la observabilidad, trazabilidad, experiencia de desarrollador (DX) y robustez de los sistemas distribuidos. Un buen formato no solo ayuda a automatizar el manejo de errores, sino tambi\u00e9n a que humanos (equipo de soporte, QA, DevOps, frontend) puedan entender y actuar sobre el error eficientemente.</p>"},{"location":"desarrollo/error-handler/respuestas/#estructuras","title":"\u2699\ufe0f Estructuras","text":""},{"location":"desarrollo/error-handler/respuestas/#estructura-body-response-simple","title":"Estructura <code>Body Response</code> simple","text":"<pre><code>{\n  \"timestamp\": \"2025-05-29T20:00:00Z\",\n  \"status\": 500,\n  \"error\": \"Internal Server Error\",\n  \"code\": \"USR_001\",\n  \"message\": \"Error con la comunicacion del servidor\",\n  \"path\": \"/api/v1/users\",\n  \"traceId\": \"123e4567-e89b-12d3-a456-426614174000\"\n}\n</code></pre>"},{"location":"desarrollo/error-handler/respuestas/#estructura-body-response-validaciones","title":"Estructura <code>Body Response</code> validaciones","text":"<pre><code>{\n  \"timestamp\": \"2025-05-29T20:00:00Z\",\n  \"status\": 422,\n  \"error\": \"Validation error\",\n  \"code\": \"USR_001\",\n  \"message\": \"Error de validacion de campos\",\n  \"path\": \"/api/v1/users\",\n  \"traceId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"errors\": {\n    \"fieldName\": {\n        \"message\": \"[fieldName] no puede ser vacio.\"\n    }\n  }\n}\n</code></pre>"},{"location":"desarrollo/error-handler/respuestas/#explicacion-de-cada-campo","title":"\ud83d\udd0d Explicaci\u00f3n de cada campo","text":"Campo Tipo Descripci\u00f3n timestamp <code>string</code> (ISO 8601) status <code>number</code> C\u00f3digo HTTP num\u00e9rico que describe el tipo de error (por ejemplo: 400, 404, 500). Es lo que eval\u00faan los clientes y gateways. error <code>string</code> Descripci\u00f3n textual corta del error HTTP (por ejemplo: \"Bad Request\", \"Unauthorized\"). \u00datil para debug r\u00e1pido o lectura por humanos. code string C\u00f3digo interno del sistema, \u00fanico y estandarizado (por ejemplo: USR_001, AUTH_403_001). Es el identificador principal del tipo de error para el backend, frontend, documentaci\u00f3n, m\u00e9tricas, y message <code>string</code> Mensaje legible explicando la causa del error, pensado para ser mostrado al usuario final o a un desarrollador. Debe ser claro y conciso. path <code>string</code> El endpoint que gener\u00f3 el error. Facilita el rastreo sin necesidad de logs adicionales. Ideal para sistemas con m\u00faltiples APIs. requestId <code>string</code> UUID generado en cada request entrante (por gateway o interceptor). Permite correlaci\u00f3n 1:1 entre logs, errores, trazas y m\u00e9tricas. Fundamental en entornos concurrentes y distribuidos. errors <code>object</code> Es un objeto que brindara informacion puntual sobre errores de validacion de campos en un request del tipo POST por ejemplo"},{"location":"desarrollo/error-handler/respuestas/#justificacion-del-formato","title":"\ud83e\udde0 Justificaci\u00f3n del Formato","text":""},{"location":"desarrollo/error-handler/respuestas/#trazabilidad-y-observabilidad","title":"Trazabilidad y Observabilidad","text":"<ul> <li><code>timestamp</code>, <code>path</code> y <code>requestId</code> permiten rastrear un error desde una alerta en Grafana hasta el log detallado en Elasticsearch o CloudWatch, pasando por el trace en OpenTelemetry.</li> </ul>"},{"location":"desarrollo/error-handler/respuestas/#manejo-programatico-de-errores","title":"Manejo program\u00e1tico de errores","text":"<ul> <li><code>code</code> es clave para que el frontend o cualquier cliente automatice respuestas. Por ejemplo: si code = AUTH_401_001, mostrar login; si code = USR_001, mostrar error de formulario.</li> </ul>"},{"location":"desarrollo/error-handler/respuestas/#estandarizacion-trans-api-y-multi-servicio","title":"Estandarizaci\u00f3n trans-API y multi-servicio","text":"<ul> <li>En sistemas con muchos microservicios, compartir un mismo esquema evita inconsistencias, bugs y horas de debugging porque ya se conoce el contrato.</li> </ul>"},{"location":"desarrollo/error-handler/respuestas/#mejor-experiencia-para-qa-soporte-y-frontend","title":"Mejor experiencia para QA, soporte y frontend","text":"<ul> <li>Saber qu\u00e9 ocurri\u00f3 y por qu\u00e9, sin necesidad de abrir los logs o tener acceso a infraestructura. El c\u00f3digo y mensaje permiten crear una wiki de errores mantenible.</li> </ul>"},{"location":"desarrollo/error-handler/respuestas/#4-propagacion-de-trace-id","title":"4. Propagaci\u00f3n de Trace ID","text":"<ul> <li>El sistema debe aceptar el header <code>X-Trace-Id</code>.</li> <li>Si no viene, debe generarse un UUID v4 por petici\u00f3n.</li> <li>Debe propagarse por todos los logs, respuestas de error y llamadas internas.</li> </ul>"},{"location":"desarrollo/error-handler/respuestas/#5-logging-estructurado","title":"5. Logging Estructurado","text":"<ul> <li>Toda excepci\u00f3n capturada debe ser logueada.</li> <li> <p>El log debe estar en formato JSON con:</p> </li> <li> <p><code>traceId</code></p> </li> <li><code>type</code>: tipo de error</li> <li><code>exception</code>: clase de excepci\u00f3n</li> <li><code>message</code>: detalle</li> <li><code>stacktrace</code>: solo si est\u00e1 en entorno de desarrollo</li> </ul>"},{"location":"desarrollo/error-handler/respuestas/#6-compatibilidad-multilenguaje","title":"6. Compatibilidad Multilenguaje","text":"<p>Se deben implementar SDKs que respeten este contrato en:</p> <ul> <li>Java (Spring Boot)</li> <li>Node.js (Express, Fastify)</li> <li>Python (FastAPI, Flask)</li> <li>Go (Gin, Echo)</li> </ul>"},{"location":"desarrollo/error-handler/respuestas/#7-documentacion-del-contrato-de-errores","title":"7. Documentaci\u00f3n del Contrato de Errores","text":"<ul> <li>Se debe incluir en la especificaci\u00f3n OpenAPI (Swagger).</li> <li>Todos los endpoints deben declarar sus posibles respuestas de error seg\u00fan este est\u00e1ndar.</li> </ul>"},{"location":"desarrollo/error-handler/respuestas/#8-validacion-automatica","title":"8. Validaci\u00f3n Autom\u00e1tica","text":"<ul> <li>Se recomienda usar linters, pruebas o validadores que aseguren el cumplimiento del est\u00e1ndar en CI/CD.</li> </ul>"},{"location":"desarrollo/error-handler/respuestas/#9-observabilidad","title":"9. Observabilidad","text":"<p>Este est\u00e1ndar est\u00e1 dise\u00f1ado para integrarse de forma natural con:</p> <ul> <li>OpenTelemetry</li> <li>Grafana Loki</li> <li>Sentry</li> <li>Datadog</li> <li>Zipkin / Jaeger</li> </ul>"},{"location":"desarrollo/error-handler/respuestas/#10-comunidad-y-futuro","title":"10. Comunidad y Futuro","text":"<p>Este documento est\u00e1 en fase de borrador. Est\u00e1 abierto a iteraciones junto a la comunidad.</p> <p>Si deseas participar, sugerir mejoras o implementar este est\u00e1ndar en tu organizaci\u00f3n, cont\u00e1ctanos. Estamos construyendo una suite de herramientas, SDKs y gu\u00edas para que la adopci\u00f3n sea inmediata y eficaz.</p> <p>Versi\u00f3n: 0.1 Autor: Damian + Lumen Licencia: NeuroNexo Tec - Uso libre, contribuci\u00f3n controlada</p>"},{"location":"proyectos/pandora-notificaciones/","title":"Proyecto de envio de notificaciones multicanal","text":""}]}